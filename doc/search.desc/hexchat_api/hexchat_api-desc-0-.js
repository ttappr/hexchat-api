searchState.loadedDescShard("hexchat_api", 0, "This crate provides a Rust interface to the Hexchat Plugin …\nA result object that allows callbacks operating on a …\nChannel flags.\nChannel types.\nThe command failed to execute.\nAny channel in Hexchat has an associated IRC network name …\nThe function was unable to acquire the desired context …\nThe context object was dropped.\nThe context acquisition succeeded, but there is some …\nDCC status values.\nDCC action type.\nThe signature for the deinit function plugin authors need …\nThe return value for client plugin callbacks.\nMirrors the C struct for <code>hexchat_event_attrs</code>. It holds the …\nFile descriptor types.\nField Data Types\nThis struct mirrors the C Hexchat struct passed to the …\nEach of the various ways the API can fail is collected in …\nA wrapper for Hexchat callback hooks. These hooks are …\nThe signature of the info function plugin authors need to …\nThe requested info wasn’t found or doesn’t exist.\nThe signature for the init function that plugin authors …\nThe requested field doesn’t exist.\nAn eagerly constructed list item for vectors created from …\nThe <code>ListIterator</code> wraps the list pointer and related …\nThe list iterator object was dropped. This might happen if …\nThe list iterator type for Hexchat requires that next() be …\nThe requested list doesn’t exist.\nRepresents a created plugin entry. Plugins that embed …\nHexchat addons need to return an instance of this struct …\nRepresents the values that can be accessed using the prefs …\nThe priorty for a given callback invoked by Hexchat.\nUsed by the <code>hexthat.strip()</code> function to determine what to …\nA thread-safe version of <code>Context</code>. Its methods …\nThread-safe versions of the <code>FieldValue</code> variants provided by\nA thread-safe wrapper for the <code>Hexchat</code> object. It …\nA thread-safe wrapper class for the Hexchat <code>ListIterator</code>. …\nThis can happen when a <code>ThreadSafeContext</code> or …\nThe list iterator may return this if the Hexchat API …\nRepresents the user data that is provided to callbacks …\nThe UserData cannot be cast to the specified type.\nApplies the given function to the wrapped object inside a …\nSame as the <code>apply()</code> function except allows mutable access …\nPrints without waiting for asynchronous completion. This …\nCreates a <code>BoxedData</code> variant. The type to use for user data …\nReturns the channel name associated with the <code>Context</code> …\nReturns the channel name associated with the context.\nThe clone operation for <code>UserData</code> allows each variant to be …\nInvokes the Hexchat command specified by <code>command</code>.\nIssues a command in the context held by the <code>Context</code> object.\nIssues a command in the context held by the …\nInvokes the Hexchat command specified by <code>command</code>.\nConvert a ContextVal variant to a Context. FieldValue also …\nConvert a ContextVal variant to a Context. FieldValue also …\nImplemented to support the <code>take()</code> operation in <code>CallbackData</code>…\n<code>dll_entry_points()</code> makes it very easy to set up your plugin…\n<code>dll_entry_points()</code> makes it very easy to set up your plugin…\nIssues one of the Hexchat IRC events. The command works …\nIssues a print event to the context held by the <code>Context</code> …\nIssues a print event to the context held by the …\nIssues one of the Hexchat IRC events. The command works …\nThis will create a new <code>Context</code> object holding an internal …\nGets a <code>ThreadSafeContext</code> object associated with the given …\nReturns a <code>Context</code> object bound to the requested …\nReturns a <code>ThreadSafeContext</code> object bound to the requested …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConsructs a list item from the given <code>ListIterator</code> instance …\nReturns the argument unchanged.\nConstructs a list item from the iterator reference at its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis will create a new <code>Context</code> that represents the …\nReturns <code>Some(&amp;FieldValue)</code> if the field exists in the item, …\nBlocking call to retrieve the return data from a callback …\nGets the user’s current <code>Context</code> wrapped in a …\nRetrieves the user data from the <code>UserData</code> object. The type …\nReturns a <code>Context</code> object for the current context (Hexchat …\nThis should be invoked from the main thread. The context …\nReturns the value for the field of the requested name.\nReturns the value for the field of the requested name.\nReturns a slice containing the field names of the list …\nReturns a vector of the names of the fields supported by …\nRetrieves the info data with the given <code>id</code>. It returns None …\nGets information from the channel/window that the <code>Context</code> …\nGets information from the channel/window that the …\nRetrieves the info data with the given <code>id</code>. It returns None …\nCreates a <code>ListItem</code> from the field data at the current …\nCreates a <code>ListItem</code> from the field data at the current …\nReturns the requested pref value, or None if it doesn’t …\nExecutes a command in the active Hexchat window. Provided …\nExecutes a command in the active Hexchat window. Provided …\nExecutes a command on the main thread. This is useful for …\nExecutes a command on the main thread. This is useful for …\nReduces the syntax required to output formatted text to …\nReduces the syntax required to output formatted text to …\nSimilar to <code>hc_print!()</code>, that can be used from spawned …\nSimilar to <code>hc_print!()</code>, that can be used from spawned …\nRegisteres a command callback with Hexchat. This will add …\nHooks a socket or file descriptor. WIN32: Passing a pipe …\nRegisters a callback to be called when a given print event …\nRegisters a callback to be called when a given print event …\nRegisters a callback to be called when a certain server …\nSets up a callback to be invoked every <code>timeout</code> …\nThe <code>ListItem</code> class supports indexing operations using the …\nConvert an IntVal variant to an i32. FieldValue also …\nConvert an IntVal variant to an i32. FieldValue also …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the callback executing on another thread …\nCreates an iterator for the requested Hexchat list. This …\nGets a <code>ListIterator</code> from the context held by the <code>Context</code> …\nGets a <code>ThreadSafeListIterator</code> from the context.  If the …\nCreates an iterator for the requested Hexchat list. This …\nExecutes a closure from the Hexchat main thread. This …\nReturns the network name associated with the <code>Context</code> …\nReturns the network name associated with the context.\nConstructor. The plugin information provided in the …\nCreates a new list iterator instance.`\nCreates a new plugin entry in Hexchat.\nProduces the list associated with <code>name</code>.\nThe standard method for iterators. The items returned are …\nCompares two nicknames, returning a similar value to …\nAdds a dummy entry in Hexchat’s list of plugins. The “…\nRemoves the dummy plugin entry from the Hexchat …\nRetrieves, from a config file that Hexchat manages for …\nReturns a list of all the plugin pref variable names your …\nWrites a variable name and value to a configuration file …\nPrints the string passed to it to the active Hexchat …\nPrints the message to the <code>Context</code> object’s Hexchat …\nPrints the message to the <code>ThreadSafeContext</code> object’s …\nPrints the string passed to it to the active Hexchat …\nConvert a PointerVal variant to a u64. FieldValue also …\nConvert a PointerVal variant to a u64. FieldValue also …\nRemoves the plugin entry for the plugin script. This can …\nSets the currently active context to the context the …\nSets the user data in the <code>UserData</code> object. The type of the …\nSets the currently active context to that bound to the  …\nCreates a <code>SharedData</code> variant instance. The type to use if …\nConvert a StringVal variant to a String. FieldValue also …\nConvert a StringVal variant to a String. FieldValue also …\nConverts a string with text attributes and IRC colors …\nCreates a <code>SyncData</code> variant. The type to use if the user …\nReturns a thread-safe wrapper for <code>Hexchat</code> that exposes …\nConvert a TimeVal variant to a time_t (i64). FieldValue …\nConvert a TimeVal variant to a time_t (i64). FieldValue …\nEagerly constructs a vector of <code>ListItem</code>s. The iterator …\nConstructs a vector of list items on the main thread all …\nTraverses a list while invoking the supplied callback to …\nStops and removes the main thread task queue handler. …\nUnhooks any Hook that was returned from a callback …\nUnhooks the related callback from Hexchat. The user_data …")